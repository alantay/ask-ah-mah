import { google } from "@ai-sdk/google";
import { generateObject } from "ai";
import { z } from "zod";

// Define the schema for both cleaned recipe and tags
const RecipeProcessingSchema = z.object({
  cleanedInstructions: z
    .string()
    .describe("Cleaned and formatted recipe instructions"),
  tags: z.array(z.string()).describe("Array of relevant recipe tags"),
});

export type RecipeProcessingResult = z.infer<typeof RecipeProcessingSchema>;

// Comprehensive tag categories for the AI to choose from
const TAG_CATEGORIES = `
CUISINE TYPES: italian, chinese, japanese, mexican, indian, thai, french, mediterranean, american, korean, vietnamese, middle-eastern, greek, spanish, moroccan

PROTEIN TYPES: chicken, beef, pork, fish, seafood, vegetarian, vegan, eggs, tofu, beans, lentils

COOKING METHODS: baked, fried, grilled, steamed, boiled, roasted, sauteed, stir-fried, braised, slow-cooked, pressure-cooked, air-fried, no-cook, raw, marinated, fermented, pickled, preserved

MEAL TYPES: breakfast, lunch, dinner, snack, appetizer, dessert, side-dish, main-course, soup, salad, beverage

DIFFICULTY: beginner, easy, intermediate, advanced, quick (under 30 min), one-pot, make-ahead

TEXTURE/STYLE: crispy, creamy, spicy, sweet, savory, tangy, hearty, light, refreshing, warming

SPECIAL EQUIPMENT: wok, instant-pot, cast-iron, slow-cooker, blender, oven-free, grill
`;

export async function processRecipe(
  recipeName: string,
  recipeInstructions: string
): Promise<RecipeProcessingResult> {
  const prompt = `
You are processing a recipe called "${recipeName}" for permanent storage in a cooking app.

RECIPE CONTEXT:
- This recipe was generated by an AI cooking assistant that has a warm granny personoa and speaks with a mix of English and Singlish
// ‚Ä¶other prompt lines‚Ä¶
- This recipe was generated by an AI cooking assistant that has a warm granny persona and speaks with a mix of English and Singlish
// ‚Ä¶possibly more lines‚Ä¶
- The recipe will be saved, shared, and referenced later by users
// ‚Ä¶subsequent code‚Ä¶
You need to do TWO tasks for this recipe:

1. CLEAN the recipe instructions for permanent storage
2. GENERATE 3-8 relevant tags

CLEANING RULES:
- Remove UI-specific symbols like ‚úÖ (checkmarks) and üõí (shopping cart icons)
- Keep cooking-related emojis (üî•, üç≥, ü•Ñ, etc.) as they add value
- Ensure proper markdown formatting with clear sections
- Keep ingredient lists and instructions well-structured
- Remove any redundant spacing or formatting artifacts
- Maintain the recipe's original tone and personality
- Keep all essential cooking information intact
- Format for long-term storage and easy sharing

TAGGING RULES:
- Choose 3-8 most relevant tags from the categories below
- Use exact tag names from the categories (lowercase, hyphenated)
- Focus on cuisine, protein, cooking method, meal type, and distinctive characteristics
- Avoid generic tags unless they're very relevant
- Consider dietary restrictions if obvious from ingredients

AVAILABLE TAG CATEGORIES:
${TAG_CATEGORIES}

RECIPE NAME: ${recipeName}

RECIPE INSTRUCTIONS TO PROCESS:
${recipeInstructions}

Return both the cleaned instructions and the tags in the specified JSON format.`;

  const result = await generateObject({
    model: google("gemini-2.0-flash"),
    schema: RecipeProcessingSchema,
    prompt,
    temperature: 0.2, // Low temperature for consistent processing
  });

  return result.object;
}
